# -*- coding: utf-8 -*-
"""backend.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-fihwYx44mKHpQOoNeZ7Lqi4bxJyQ_tu
"""

#pip install sentence-transformers

# Importing libraries
import math
import json
from sentence_transformers import SentenceTransformer, util
import pandas as pd
import numpy as np
import requests

def quote_pop(user_input):
  url = "https://raw.githubusercontent.com/JamesFT/Database-Quotes-JSON/master/quotes.json" 
  resp = requests.get(url)
  data = json.loads(resp.text)
  # print("Connection with database established")

  quotesList = []
  for i in range(len(data)):
    quotesList.append(data[i]["quoteText"])
  # print("Quotes successfully retrieved")

  model = SentenceTransformer('all-mpnet-base-v2')
  # print("Language model downloaded")

  # The sentences we'd like to encode
  # It's a hard-coded example for the sake of having a quick demo. 
  # Later on, this will be replaced directly by the user input.
  ourSentences = [user_input]

  # Get embeddings of sentences
  # catEmbeddings = model.encode(quotesList)
  sentEmbeddings = model.encode(ourSentences)
  # print("quotes and sentences embeddings done")

  emb_csv = pd.read_csv("https://raw.githubusercontent.com/romansvintitskyy/QuotePop/main/embeddings.csv").drop(columns=["Unnamed: 0"])
  # emb_csv = emb_csv.drop(columns=["Unnamed: 0"])

  quoteRes = [0]*emb_csv.shape[0]
  maxSimRes = -math.inf

  # for each category
  for i in range(emb_csv.shape[0]):
    # calculate the cosine similarity between our sentence embedding 
    # and the quote embedding
    currSimRes = util.cos_sim(sentEmbeddings, list(emb_csv.iloc[i])).item()
    # store the result in a results array
    quoteRes[i] = currSimRes
    # update the maxSimRes so it stores the highest similarity score
    maxSimRes = max(maxSimRes, currSimRes)
  # print("Cosine similarity score calculated")


  # print("{0:.4f}".format(sim.tolist()[0][0])) 
  tempQuotes = sorted([*set(quoteRes)], reverse = True)
  # print("quotes scores sorted")

  firstQ = tempQuotes[0]
  secondQ = tempQuotes[1]
  thirdQ = tempQuotes[2]
  

  # Retrieve the quote with the highest similarity score
  firsTargetQuote = quotesList[quoteRes.index(firstQ)]
  secondTargetQuote = quotesList[quoteRes.index(secondQ)]
  thirdTargetQuote = quotesList[quoteRes.index(thirdQ)]
  # print("Target Quotes retrived")
  targetQuotes = [firsTargetQuote, secondTargetQuote, thirdTargetQuote]

  print(targetQuotes[0])
  return(targetQuotes[0])



